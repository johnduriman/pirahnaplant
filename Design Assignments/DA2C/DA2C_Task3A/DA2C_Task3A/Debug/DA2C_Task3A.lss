
DA2C_Task3A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000274  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile uint8_t OVFCount;
volatile uint8_t LEDControl;

int main(void)
{
	DDRB |= (1<<2);								//Set PortB.2 as an output
  90:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A |= (1<<WGM01);						//Set to CTC Mode
  92:	84 b5       	in	r24, 0x24	; 36
  94:	82 60       	ori	r24, 0x02	; 2
  96:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00) | (1<<CS02);			//Set prescaler to 1024
  98:	85 b5       	in	r24, 0x25	; 37
  9a:	85 60       	ori	r24, 0x05	; 5
  9c:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;									//Initialize counter
  9e:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0xC8;								//Sets counter to 0x38
  a0:	88 ec       	ldi	r24, 0xC8	; 200
  a2:	87 bd       	out	0x27, r24	; 39
	OVFCount = 0;								//Resets OVFCount
  a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	LEDControl = 0;								//Resets LEDControl
  a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <LEDControl>
	TIMSK0 = (1<<OCIE0A);						//Enable Timer0 Compare Match
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();										//Enable global interrupts
  b2:	78 94       	sei
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x24>

000000b6 <__vector_14>:
	while (1){}
	
}

ISR(TIMER0_COMPA_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
	if(LEDControl == 0)
  c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LEDControl>
  c6:	81 11       	cpse	r24, r1
  c8:	15 c0       	rjmp	.+42     	; 0xf4 <__vector_14+0x3e>
	{
		PORTB &= ~(1<<2);						//Turns on LED
  ca:	2a 98       	cbi	0x05, 2	; 5
		if(OVFCount == 34)
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d0:	82 32       	cpi	r24, 0x22	; 34
  d2:	39 f4       	brne	.+14     	; 0xe2 <__vector_14+0x2c>
		{
			OVFCount = 0;						//Reset overflow counter
  d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			LEDControl++;						//Switch thte state to LED off
  d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LEDControl>
  dc:	8f 5f       	subi	r24, 0xFF	; 255
  de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LEDControl>
		}
		OVFCount++;								//Increment overflow counter
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR0A = 0xC8;							//Assigns 435 ms timer
  ec:	88 ec       	ldi	r24, 0xC8	; 200
  ee:	87 bd       	out	0x27, r24	; 39
		TCNT0 = 0;								//Resets counter 
  f0:	16 bc       	out	0x26, r1	; 38
  f2:	14 c0       	rjmp	.+40     	; 0x11c <__vector_14+0x66>
	}
	else
	{
		PORTB |= (1<<2);						//Turns off LED
  f4:	2a 9a       	sbi	0x05, 2	; 5
		if(OVFCount == 33)
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fa:	81 32       	cpi	r24, 0x21	; 33
  fc:	39 f4       	brne	.+14     	; 0x10c <__vector_14+0x56>
		{
			OVFCount = 0;						//Reset overflow counter
  fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			LEDControl--;						//Switch the state to LED on
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LEDControl>
 106:	81 50       	subi	r24, 0x01	; 1
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LEDControl>
		}
		OVFCount++;								//Increment overflow counter
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR0A = 0x8E;							//Assigns 300 ms timer
 116:	8e e8       	ldi	r24, 0x8E	; 142
 118:	87 bd       	out	0x27, r24	; 39
		TCNT0 = 0;								//Resets counter
 11a:	16 bc       	out	0x26, r1	; 38
	}
	
}
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
