
DA2C_Task2B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cd  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000286  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038a  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile uint8_t LEDControl;
volatile uint8_t PINPressed;

int main(void)
{
	DDRB |= (1<<2);								//Set PortB.2 as an output
  90:	22 9a       	sbi	0x04, 2	; 4
	DDRC &= (0<<1);								//Sets PORTC.1 as an input
  92:	87 b1       	in	r24, 0x07	; 7
  94:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<1);							//Enable pull-up
  96:	41 9a       	sbi	0x08, 1	; 8
	TCCR0A = 0X00;								//Set to Normal Mode
  98:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS00) | (1<<CS02);			//Set prescaler to 1024
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	85 60       	ori	r24, 0x05	; 5
  9e:	85 bd       	out	0x25, r24	; 37
	PORTB |= (1<<2);							//Turn off LED
  a0:	2a 9a       	sbi	0x05, 2	; 5
	PINPressed = 0;								//Reset value
  a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	OVFCount = 0;								//Resets OVFCount
  a6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <OVFCount>
	LEDControl = 0;								//Resets LEDControl
  aa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <LEDControl>
	TIMSK0 |= (1<<TOIE0);						//Enable Timer0 Overflow Interrupt
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24
	sei();										//Enable global interrupts
  b8:	78 94       	sei
	while (1)
	{
		//Checks to see if PINC.1 has been pressed
		if(!(PINC & (1<<PINC1)))
		{
			TCNT0 = 0x46;						//Reset Timer counter
  ba:	96 e4       	ldi	r25, 0x46	; 70
	sei();										//Enable global interrupts
	
	while (1)
	{
		//Checks to see if PINC.1 has been pressed
		if(!(PINC & (1<<PINC1)))
  bc:	31 99       	sbic	0x06, 1	; 6
  be:	fe cf       	rjmp	.-4      	; 0xbc <main+0x2c>
		{
			TCNT0 = 0x46;						//Reset Timer counter
  c0:	96 bd       	out	0x26, r25	; 38
			PINPressed++;						//Allows for the timer to execute the code
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  cc:	f7 cf       	rjmp	.-18     	; 0xbc <main+0x2c>

000000ce <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
	//The switch must be pressed first before this code runs
	if(PINPressed > 0)							
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	88 23       	and	r24, r24
  e0:	09 f1       	breq	.+66     	; 0x124 <__vector_16+0x56>
	{
		//First part of loop will turn the LED on
		if(LEDControl == 0)						
  e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LEDControl>
  e6:	81 11       	cpse	r24, r1
  e8:	14 c0       	rjmp	.+40     	; 0x112 <__vector_16+0x44>
		{
			PORTB &= ~(1<<2);						//Turns on LED
  ea:	2a 98       	cbi	0x05, 2	; 5
			if(OVFCount == 105)						//1250ms
  ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <OVFCount>
  f0:	89 36       	cpi	r24, 0x69	; 105
  f2:	39 f4       	brne	.+14     	; 0x102 <__vector_16+0x34>
			{
				OVFCount = 0;						//Resets OVFCount
  f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <OVFCount>
				LEDControl++;						//LEDControl will turn it off
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LEDControl>
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LEDControl>
			}
			OVFCount++;								//Increments OVFCount
 102:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <OVFCount>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <OVFCount>
			TCNT0 = 0x46;							//Resets counter to 0x38
 10c:	86 e4       	ldi	r24, 0x46	; 70
 10e:	86 bd       	out	0x26, r24	; 38
 110:	0b c0       	rjmp	.+22     	; 0x128 <__vector_16+0x5a>
		}
		//After OVFCount reaches 105, turn off LED
		else
		{
			PORTB |= (1<<2);						//Turns off LED
 112:	2a 9a       	sbi	0x05, 2	; 5
			LEDControl--;							//Resets LEDControl
 114:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <LEDControl>
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <LEDControl>
			PINPressed = 0;							//Resets state of PINPressed
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 122:	02 c0       	rjmp	.+4      	; 0x128 <__vector_16+0x5a>
		}
	}
	else
	{
		TCNT0 = 0x46;								//Reset timer counter
 124:	86 e4       	ldi	r24, 0x46	; 70
 126:	86 bd       	out	0x26, r24	; 38
	}
}
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
