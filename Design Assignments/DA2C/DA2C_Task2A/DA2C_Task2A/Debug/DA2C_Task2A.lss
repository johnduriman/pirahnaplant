
DA2C_Task2A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bb  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000262  00000000  00000000  00000f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000153f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile uint8_t OVFCount;
volatile uint8_t LEDControl;

int main(void)
{
	DDRB |= (1<<2);								//Set PortB.2 as an output
  90:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0X00;								//Set to Normal Mode
  92:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS00) | (1<<CS02);			//Set prescaler to 1024
  94:	85 b5       	in	r24, 0x25	; 37
  96:	85 60       	ori	r24, 0x05	; 5
  98:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x38;								//Sets counter to 0x38
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	86 bd       	out	0x26, r24	; 38
	OVFCount = 0;								//Resets OVFCount
  9e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	LEDControl = 0;								//Resets LEDControl
  a2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <LEDControl>
	TIMSK0 |= (1<<TOIE0);						//Enable Timer0 Overflow Interrupt
  a6:	ee e6       	ldi	r30, 0x6E	; 110
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
	sei();										//Enable global interrupts
  b0:	78 94       	sei
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x22>

000000b4 <__vector_16>:
	while (1){}									//Do nothing
		
}
	
ISR(TIMER0_OVF_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
	//This if/else switches from LED on and LED off
	if(LEDControl == 0)
  c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LEDControl>
  c4:	81 11       	cpse	r24, r1
  c6:	14 c0       	rjmp	.+40     	; 0xf0 <__vector_16+0x3c>
	{
		PORTB &= ~(1<<2);						//Turns on LED
  c8:	2a 98       	cbi	0x05, 2	; 5
		if(OVFCount == 34)
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	82 32       	cpi	r24, 0x22	; 34
  d0:	39 f4       	brne	.+14     	; 0xe0 <__vector_16+0x2c>
		{
			OVFCount = 0;						//Reset OVFCount
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			LEDControl++;						//Switch to LED off
  d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LEDControl>
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LEDControl>
		}
		OVFCount++;								//Increment overflow count
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		TCNT0 = 0x38;							//Resets counter to 0x38
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	86 bd       	out	0x26, r24	; 38
  ee:	13 c0       	rjmp	.+38     	; 0x116 <__vector_16+0x62>
	}
	else
	{
		PORTB |= (1<<2);						//Turns off LED
  f0:	2a 9a       	sbi	0x05, 2	; 5
		if(OVFCount == 33)
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	81 32       	cpi	r24, 0x21	; 33
  f8:	39 f4       	brne	.+14     	; 0x108 <__vector_16+0x54>
		{
			OVFCount = 0;						//Reset OVFCount
  fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			LEDControl--;						//Switch to LED on
  fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LEDControl>
 102:	81 50       	subi	r24, 0x01	; 1
 104:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LEDControl>
		}
		OVFCount++;								//Increment overflow count
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		TCNT0 = 0x72;							//Resets counter to 0x72
 112:	82 e7       	ldi	r24, 0x72	; 114
 114:	86 bd       	out	0x26, r24	; 38
	}
	
}
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
