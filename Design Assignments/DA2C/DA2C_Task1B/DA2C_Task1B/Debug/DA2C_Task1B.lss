
DA2C_Task1B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022e  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000044  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//TCNT0 = 256 - 186 = 70 = 0x46

int main(void)
{
	uint8_t OVFCount = 0;						//Initialize OVFCount
	DDRB |= (1<<2);								//Set PortB.2 as an output
  80:	22 9a       	sbi	0x04, 2	; 4
	DDRC &= (0<<1);								//Sets PORTC.1 as an input
  82:	87 b1       	in	r24, 0x07	; 7
  84:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<1);							//Enable pull-up
  86:	41 9a       	sbi	0x08, 1	; 8
	TCCR0A = 0X00;								//Set to Normal Mode
  88:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS00) | (1<<CS02);			//Set prescaler to 1024
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37
		{
			//Keeps LED on for 435ms
			for(OVFCount = 0; OVFCount <= 105; OVFCount++)
			{
				PORTB &= ~(1<<2);					//Turns on LED
				TCNT0 = 0x46;						//Resets counter to 0x38
  90:	26 e4       	ldi	r18, 0x46	; 70
				while ((TIFR0 & 0x01) == 0);		//Check for flag
				TIFR0 = 0x01;						//Resets overflow flag
  92:	91 e0       	ldi	r25, 0x01	; 1
	TCCR0B |= (1<<CS00) | (1<<CS02);			//Set prescaler to 1024
	
	while (1)
	{
		//Check if PINC.1 has been pressed
		if(!(PINC & (1<<PINC1)))
  94:	31 99       	sbic	0x06, 1	; 6
  96:	09 c0       	rjmp	.+18     	; 0xaa <main+0x2a>
  98:	8a e6       	ldi	r24, 0x6A	; 106
		{
			//Keeps LED on for 435ms
			for(OVFCount = 0; OVFCount <= 105; OVFCount++)
			{
				PORTB &= ~(1<<2);					//Turns on LED
  9a:	2a 98       	cbi	0x05, 2	; 5
				TCNT0 = 0x46;						//Resets counter to 0x38
  9c:	26 bd       	out	0x26, r18	; 38
				while ((TIFR0 & 0x01) == 0);		//Check for flag
  9e:	a8 9b       	sbis	0x15, 0	; 21
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x1e>
				TIFR0 = 0x01;						//Resets overflow flag
  a2:	95 bb       	out	0x15, r25	; 21
  a4:	81 50       	subi	r24, 0x01	; 1
	{
		//Check if PINC.1 has been pressed
		if(!(PINC & (1<<PINC1)))
		{
			//Keeps LED on for 435ms
			for(OVFCount = 0; OVFCount <= 105; OVFCount++)
  a6:	c9 f7       	brne	.-14     	; 0x9a <main+0x1a>
  a8:	f5 cf       	rjmp	.-22     	; 0x94 <main+0x14>
			}
		}
		//Keep default state of LED.2 to off
		else
		{
			PORTB |= (1 << 2);					//Turns off LED
  aa:	2a 9a       	sbi	0x05, 2	; 5
  ac:	f3 cf       	rjmp	.-26     	; 0x94 <main+0x14>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
