
DA3A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000040c  000004a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080011c  0080011c  000004bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1b  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076c  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003df  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b3  00000000  00000000  00001f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000020d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 04 02 	jmp	0x408	; 0x408 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_init>:
unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
	
}
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  bc:	08 95       	ret

000000be <USART_tx_string>:
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	fc 01       	movw	r30, r24
  c4:	20 81       	ld	r18, Z
  c6:	22 23       	and	r18, r18
  c8:	69 f0       	breq	.+26     	; 0xe4 <USART_tx_string+0x26>
  ca:	dc 01       	movw	r26, r24
  cc:	11 96       	adiw	r26, 0x01	; 1
  ce:	e0 ec       	ldi	r30, 0xC0	; 192
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	c6 ec       	ldi	r28, 0xC6	; 198
  d4:	d0 e0       	ldi	r29, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	95 ff       	sbrs	r25, 5
  da:	fd cf       	rjmp	.-6      	; 0xd6 <USART_tx_string+0x18>
  dc:	28 83       	st	Y, r18
  de:	2d 91       	ld	r18, X+
  e0:	21 11       	cpse	r18, r1
  e2:	f9 cf       	rjmp	.-14     	; 0xd6 <USART_tx_string+0x18>
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <adc_init>:

void adc_init(void)
{
	/** Setup and enable ADC **/
	ADMUX = (0 << REFS1)	|					//Reference Selection Bits	
  ea:	83 e4       	ldi	r24, 0x43	; 67
  ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			(0 << ADLAR)	|					//ADC Left Adjust Result
			(0 << MUX2)		|					//ANalog Channel Selection Bits
			(1 << MUX1)		|					//ADC2 (PC2 PIN25)
			(1 << MUX0)		;
			
	ADCSRA =	(1 << ADEN)	|					//ADC Enable
  f0:	85 e8       	ldi	r24, 0x85	; 133
  f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  f6:	08 95       	ret

000000f8 <main>:
char buffer[20];


int main(void)
{
	adc_init();									//Initialize the ADC
  f8:	0e 94 75 00 	call	0xea	; 0xea <adc_init>
	USART_init();								//Initialize the USART
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init>
	TCCR0A = 0X00;								//Set to Normal Mode
 100:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1<<CS00) | (1<<CS02);			//Set prescaler to 1024
 102:	85 b5       	in	r24, 0x25	; 37
 104:	85 60       	ori	r24, 0x05	; 5
 106:	85 bd       	out	0x25, r24	; 37
	OVFCount = 0;								//Resets OVFCount
 108:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <OVFCount>
	Delay = 0;									//Resets Delay
 10c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <Delay>
	TIMSK0 |= (1<<TOIE0);						//Enable Timer0 Overflow Interrupt
 110:	ee e6       	ldi	r30, 0x6E	; 110
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
	sei();										//Enable global interrupts
 11a:	78 94       	sei
	TCNT0 = 0x82;								//Resets counter to 0x82
 11c:	82 e8       	ldi	r24, 0x82	; 130
 11e:	86 bd       	out	0x26, r24	; 38
 120:	ff cf       	rjmp	.-2      	; 0x120 <main+0x28>

00000122 <__vector_16>:
									
	
}

ISR(TIMER0_OVF_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	if(Delay == 0)
 144:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <Delay>
 148:	81 11       	cpse	r24, r1
 14a:	11 c0       	rjmp	.+34     	; 0x16e <__vector_16+0x4c>
	{
		if(OVFCount == 125)
 14c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <OVFCount>
 150:	8d 37       	cpi	r24, 0x7D	; 125
 152:	29 f4       	brne	.+10     	; 0x15e <__vector_16+0x3c>
		{
			OVFCount = 0;						//Reset OVFCount
 154:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <OVFCount>
			Delay = 1;							//Go to else
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <Delay>
		}
		OVFCount++;								//Increment overflow count
 15e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <OVFCount>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <OVFCount>
		TCNT0 = 0x82;							//Resets counter to 0x82
 168:	82 e8       	ldi	r24, 0x82	; 130
 16a:	86 bd       	out	0x26, r24	; 38
 16c:	48 c0       	rjmp	.+144    	; 0x1fe <__vector_16+0xdc>
	}
	else
	{
		r = rand();								//Returns a random integer
 16e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
 172:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <r>
		USART_tx_string("Integer: ");			//Prints out string
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		itoa(r, buffer, 10);					//Here 10 means decimal
 17e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <r>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 182:	4a e0       	ldi	r20, 0x0A	; 10
 184:	6f e1       	ldi	r22, 0x1F	; 31
 186:	71 e0       	ldi	r23, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__itoa_ncheck>
		USART_tx_string(buffer);				//Prints out integer
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		USART_tx_string("\n");					//Prints out
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		
		r = rand();								//Returns a random integer
 19e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
 1a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <r>
		itoa(r, buffer, 10);					//Here 10 means decimal
 1a6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <r>
 1aa:	4a e0       	ldi	r20, 0x0A	; 10
 1ac:	6f e1       	ldi	r22, 0x1F	; 31
 1ae:	71 e0       	ldi	r23, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__itoa_ncheck>
		USART_tx_string("Float  : ");			//Prints out string
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		USART_tx_string(buffer);				//Prints out integer
 1be:	8f e1       	ldi	r24, 0x1F	; 31
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		USART_tx_string(".");					
 1c6:	8a e1       	ldi	r24, 0x1A	; 26
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		r = rand();								//Returns a random integer
 1ce:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <rand>
 1d2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <r>
		itoa(r, buffer, 10);					//Here 10 means decimal
 1d6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <r>
 1da:	4a e0       	ldi	r20, 0x0A	; 10
 1dc:	6f e1       	ldi	r22, 0x1F	; 31
 1de:	71 e0       	ldi	r23, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__itoa_ncheck>
		USART_tx_string(buffer);				//Prints out integer
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		USART_tx_string("\n");					//Enter
 1ee:	8e e0       	ldi	r24, 0x0E	; 14
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_tx_string>
		
		Delay = 0;								//Execute if statement
 1f6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <Delay>
		TCNT0 = 0x82;							//Resets counter to 0x82
 1fa:	82 e8       	ldi	r24, 0x82	; 130
 1fc:	86 bd       	out	0x26, r24	; 38

	}
	
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <do_rand>:
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	ec 01       	movw	r28, r24
 236:	68 81       	ld	r22, Y
 238:	79 81       	ldd	r23, Y+1	; 0x01
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	9b 81       	ldd	r25, Y+3	; 0x03
 23e:	61 15       	cp	r22, r1
 240:	71 05       	cpc	r23, r1
 242:	81 05       	cpc	r24, r1
 244:	91 05       	cpc	r25, r1
 246:	21 f4       	brne	.+8      	; 0x250 <do_rand+0x30>
 248:	64 e2       	ldi	r22, 0x24	; 36
 24a:	79 ed       	ldi	r23, 0xD9	; 217
 24c:	8b e5       	ldi	r24, 0x5B	; 91
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	2d e1       	ldi	r18, 0x1D	; 29
 252:	33 ef       	ldi	r19, 0xF3	; 243
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodsi4>
 25c:	49 01       	movw	r8, r18
 25e:	5a 01       	movw	r10, r20
 260:	9b 01       	movw	r18, r22
 262:	ac 01       	movw	r20, r24
 264:	a7 ea       	ldi	r26, 0xA7	; 167
 266:	b1 e4       	ldi	r27, 0x41	; 65
 268:	0e 94 c0 01 	call	0x380	; 0x380 <__muluhisi3>
 26c:	6b 01       	movw	r12, r22
 26e:	7c 01       	movw	r14, r24
 270:	ac ee       	ldi	r26, 0xEC	; 236
 272:	b4 ef       	ldi	r27, 0xF4	; 244
 274:	a5 01       	movw	r20, r10
 276:	94 01       	movw	r18, r8
 278:	0e 94 ce 01 	call	0x39c	; 0x39c <__mulohisi3>
 27c:	dc 01       	movw	r26, r24
 27e:	cb 01       	movw	r24, r22
 280:	8c 0d       	add	r24, r12
 282:	9d 1d       	adc	r25, r13
 284:	ae 1d       	adc	r26, r14
 286:	bf 1d       	adc	r27, r15
 288:	b7 ff       	sbrs	r27, 7
 28a:	03 c0       	rjmp	.+6      	; 0x292 <do_rand+0x72>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	a1 09       	sbc	r26, r1
 290:	b0 48       	sbci	r27, 0x80	; 128
 292:	88 83       	st	Y, r24
 294:	99 83       	std	Y+1, r25	; 0x01
 296:	aa 83       	std	Y+2, r26	; 0x02
 298:	bb 83       	std	Y+3, r27	; 0x03
 29a:	9f 77       	andi	r25, 0x7F	; 127
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	08 95       	ret

000002b2 <rand_r>:
 2b2:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2b6:	08 95       	ret

000002b8 <rand>:
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 10 01 	call	0x220	; 0x220 <do_rand>
 2c0:	08 95       	ret

000002c2 <srand>:
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2ce:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 2d2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 2d6:	08 95       	ret

000002d8 <__itoa_ncheck>:
 2d8:	bb 27       	eor	r27, r27
 2da:	4a 30       	cpi	r20, 0x0A	; 10
 2dc:	31 f4       	brne	.+12     	; 0x2ea <__itoa_ncheck+0x12>
 2de:	99 23       	and	r25, r25
 2e0:	22 f4       	brpl	.+8      	; 0x2ea <__itoa_ncheck+0x12>
 2e2:	bd e2       	ldi	r27, 0x2D	; 45
 2e4:	90 95       	com	r25
 2e6:	81 95       	neg	r24
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__utoa_common>

000002ee <__utoa_ncheck>:
 2ee:	bb 27       	eor	r27, r27

000002f0 <__utoa_common>:
 2f0:	fb 01       	movw	r30, r22
 2f2:	55 27       	eor	r21, r21
 2f4:	aa 27       	eor	r26, r26
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	aa 1f       	adc	r26, r26
 2fc:	a4 17       	cp	r26, r20
 2fe:	10 f0       	brcs	.+4      	; 0x304 <__utoa_common+0x14>
 300:	a4 1b       	sub	r26, r20
 302:	83 95       	inc	r24
 304:	50 51       	subi	r21, 0x10	; 16
 306:	b9 f7       	brne	.-18     	; 0x2f6 <__utoa_common+0x6>
 308:	a0 5d       	subi	r26, 0xD0	; 208
 30a:	aa 33       	cpi	r26, 0x3A	; 58
 30c:	08 f0       	brcs	.+2      	; 0x310 <__utoa_common+0x20>
 30e:	a9 5d       	subi	r26, 0xD9	; 217
 310:	a1 93       	st	Z+, r26
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	79 f7       	brne	.-34     	; 0x2f4 <__utoa_common+0x4>
 316:	b1 11       	cpse	r27, r1
 318:	b1 93       	st	Z+, r27
 31a:	11 92       	st	Z+, r1
 31c:	cb 01       	movw	r24, r22
 31e:	0c 94 91 01 	jmp	0x322	; 0x322 <strrev>

00000322 <strrev>:
 322:	dc 01       	movw	r26, r24
 324:	fc 01       	movw	r30, r24
 326:	67 2f       	mov	r22, r23
 328:	71 91       	ld	r23, Z+
 32a:	77 23       	and	r23, r23
 32c:	e1 f7       	brne	.-8      	; 0x326 <strrev+0x4>
 32e:	32 97       	sbiw	r30, 0x02	; 2
 330:	04 c0       	rjmp	.+8      	; 0x33a <strrev+0x18>
 332:	7c 91       	ld	r23, X
 334:	6d 93       	st	X+, r22
 336:	70 83       	st	Z, r23
 338:	62 91       	ld	r22, -Z
 33a:	ae 17       	cp	r26, r30
 33c:	bf 07       	cpc	r27, r31
 33e:	c8 f3       	brcs	.-14     	; 0x332 <strrev+0x10>
 340:	08 95       	ret

00000342 <__divmodsi4>:
 342:	05 2e       	mov	r0, r21
 344:	97 fb       	bst	r25, 7
 346:	1e f4       	brtc	.+6      	; 0x34e <__divmodsi4+0xc>
 348:	00 94       	com	r0
 34a:	0e 94 b8 01 	call	0x370	; 0x370 <__negsi2>
 34e:	57 fd       	sbrc	r21, 7
 350:	07 d0       	rcall	.+14     	; 0x360 <__divmodsi4_neg2>
 352:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__udivmodsi4>
 356:	07 fc       	sbrc	r0, 7
 358:	03 d0       	rcall	.+6      	; 0x360 <__divmodsi4_neg2>
 35a:	4e f4       	brtc	.+18     	; 0x36e <__divmodsi4_exit>
 35c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__negsi2>

00000360 <__divmodsi4_neg2>:
 360:	50 95       	com	r21
 362:	40 95       	com	r20
 364:	30 95       	com	r19
 366:	21 95       	neg	r18
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	4f 4f       	sbci	r20, 0xFF	; 255
 36c:	5f 4f       	sbci	r21, 0xFF	; 255

0000036e <__divmodsi4_exit>:
 36e:	08 95       	ret

00000370 <__negsi2>:
 370:	90 95       	com	r25
 372:	80 95       	com	r24
 374:	70 95       	com	r23
 376:	61 95       	neg	r22
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	8f 4f       	sbci	r24, 0xFF	; 255
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	08 95       	ret

00000380 <__muluhisi3>:
 380:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__umulhisi3>
 384:	a5 9f       	mul	r26, r21
 386:	90 0d       	add	r25, r0
 388:	b4 9f       	mul	r27, r20
 38a:	90 0d       	add	r25, r0
 38c:	a4 9f       	mul	r26, r20
 38e:	80 0d       	add	r24, r0
 390:	91 1d       	adc	r25, r1
 392:	11 24       	eor	r1, r1
 394:	08 95       	ret

00000396 <__mulshisi3>:
 396:	b7 ff       	sbrs	r27, 7
 398:	0c 94 c0 01 	jmp	0x380	; 0x380 <__muluhisi3>

0000039c <__mulohisi3>:
 39c:	0e 94 c0 01 	call	0x380	; 0x380 <__muluhisi3>
 3a0:	82 1b       	sub	r24, r18
 3a2:	93 0b       	sbc	r25, r19
 3a4:	08 95       	ret

000003a6 <__udivmodsi4>:
 3a6:	a1 e2       	ldi	r26, 0x21	; 33
 3a8:	1a 2e       	mov	r1, r26
 3aa:	aa 1b       	sub	r26, r26
 3ac:	bb 1b       	sub	r27, r27
 3ae:	fd 01       	movw	r30, r26
 3b0:	0d c0       	rjmp	.+26     	; 0x3cc <__udivmodsi4_ep>

000003b2 <__udivmodsi4_loop>:
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	ee 1f       	adc	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	a2 17       	cp	r26, r18
 3bc:	b3 07       	cpc	r27, r19
 3be:	e4 07       	cpc	r30, r20
 3c0:	f5 07       	cpc	r31, r21
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <__udivmodsi4_ep>
 3c4:	a2 1b       	sub	r26, r18
 3c6:	b3 0b       	sbc	r27, r19
 3c8:	e4 0b       	sbc	r30, r20
 3ca:	f5 0b       	sbc	r31, r21

000003cc <__udivmodsi4_ep>:
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	1a 94       	dec	r1
 3d6:	69 f7       	brne	.-38     	; 0x3b2 <__udivmodsi4_loop>
 3d8:	60 95       	com	r22
 3da:	70 95       	com	r23
 3dc:	80 95       	com	r24
 3de:	90 95       	com	r25
 3e0:	9b 01       	movw	r18, r22
 3e2:	ac 01       	movw	r20, r24
 3e4:	bd 01       	movw	r22, r26
 3e6:	cf 01       	movw	r24, r30
 3e8:	08 95       	ret

000003ea <__umulhisi3>:
 3ea:	a2 9f       	mul	r26, r18
 3ec:	b0 01       	movw	r22, r0
 3ee:	b3 9f       	mul	r27, r19
 3f0:	c0 01       	movw	r24, r0
 3f2:	a3 9f       	mul	r26, r19
 3f4:	70 0d       	add	r23, r0
 3f6:	81 1d       	adc	r24, r1
 3f8:	11 24       	eor	r1, r1
 3fa:	91 1d       	adc	r25, r1
 3fc:	b2 9f       	mul	r27, r18
 3fe:	70 0d       	add	r23, r0
 400:	81 1d       	adc	r24, r1
 402:	11 24       	eor	r1, r1
 404:	91 1d       	adc	r25, r1
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
