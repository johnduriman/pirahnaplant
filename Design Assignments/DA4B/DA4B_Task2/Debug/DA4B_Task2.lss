
DA4B_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000845  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000752  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033e  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ab  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
    }
}

void adc_init(void)
{
	ADMUX = (0<<REFS1)	|						//Reference Selection Bits
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			(0<<ADLAR)	|						//ADC Left Adjust Result
			(0<<MUX2)	|						//Analog Channel Selection bits
			(0<<MUX1)	|						//PC0 | PCINT8 | ADC0
			(0<<MUX0)	;
	
	ADCSRA =	(1<<ADEN)	|					//ADC Enable
  ac:	85 e8       	ldi	r24, 0x85	; 133
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b2:	08 95       	ret

000000b4 <usart_init>:
				(1<<ADPS0)	;
}

void usart_init(void)
{
	UBRR0H = UBRRH_VALUE;
  b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);			//8 bit data
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0)  | _BV(TXEN0);			//Enable RX and TX
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  ca:	08 95       	ret

000000cc <usart_tx_string>:
}

void usart_tx_string(char *data)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	while ((*data != '\0'))
  d0:	fc 01       	movw	r30, r24
  d2:	20 81       	ld	r18, Z
  d4:	22 23       	and	r18, r18
  d6:	69 f0       	breq	.+26     	; 0xf2 <usart_tx_string+0x26>
  d8:	dc 01       	movw	r26, r24
  da:	11 96       	adiw	r26, 0x01	; 1
	{
		while (!(UCSR0A & (1 << UDRE0)));
  dc:	e0 ec       	ldi	r30, 0xC0	; 192
  de:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
  e0:	c6 ec       	ldi	r28, 0xC6	; 198
  e2:	d0 e0       	ldi	r29, 0x00	; 0

void usart_tx_string(char *data)
{
	while ((*data != '\0'))
	{
		while (!(UCSR0A & (1 << UDRE0)));
  e4:	90 81       	ld	r25, Z
  e6:	95 ff       	sbrs	r25, 5
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <usart_tx_string+0x18>
		UDR0 = *data;
  ea:	28 83       	st	Y, r18
	UCSR0B = _BV(RXEN0)  | _BV(TXEN0);			//Enable RX and TX
}

void usart_tx_string(char *data)
{
	while ((*data != '\0'))
  ec:	2d 91       	ld	r18, X+
  ee:	21 11       	cpse	r18, r1
  f0:	f9 cf       	rjmp	.-14     	; 0xe4 <usart_tx_string+0x18>
	{
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = *data;
		data++;
	}
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <main>:
unsigned char usart_recieve(void);

volatile uint8_t potValue;

int main(void)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	64 97       	sbiw	r28, 0x14	; 20
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	
	//Setup inputs and outputs
	DDRB = 0xFF;						//Make PORTB output
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 b9       	out	0x04, r24	; 4
	
	//Setup Timer
	TCCR1A  |= (1<<WGM11)				
 110:	e0 e8       	ldi	r30, 0x80	; 128
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	82 6a       	ori	r24, 0xA2	; 162
 118:	80 83       	st	Z, r24
			|  (1<<COM1A1)
			|  (1<<COM1B1);				//Non inverted PWM
	TCCR1B	|= (1<<WGM13)				
 11a:	e1 e8       	ldi	r30, 0x81	; 129
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8b 61       	ori	r24, 0x1B	; 27
 122:	80 83       	st	Z, r24
			|  (1<<WGM12)
			|  (1<<CS11)
			|  (1<<CS10);				//Prescaler = 64 MODE 14(FAST PWM)		
	ICR1 = 4999;
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	93 e1       	ldi	r25, 0x13	; 19
 128:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 12c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	
	//Setup interrupts
	PCMSK1 |= (1<<PCINT9);
 130:	ec e6       	ldi	r30, 0x6C	; 108
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	82 60       	ori	r24, 0x02	; 2
 138:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
 13a:	e8 e6       	ldi	r30, 0x68	; 104
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24
	sei();
 144:	78 94       	sei
	
	usart_init();
 146:	0e 94 5a 00 	call	0xb4	; 0xb4 <usart_init>
	adc_init();
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	
  
    while (1) 
    {
		ADCSRA |= (1<<ADSC);
 14e:	0a e7       	ldi	r16, 0x7A	; 122
 150:	10 e0       	ldi	r17, 0x00	; 0
		while((ADCSRA & (1<<ADIF)) == 0);
		ADCSRA |= (1<<ADIF);
		
		potValue = ADC;
 152:	0f 2e       	mov	r0, r31
 154:	f8 e7       	ldi	r31, 0x78	; 120
 156:	cf 2e       	mov	r12, r31
 158:	d1 2c       	mov	r13, r1
 15a:	f0 2d       	mov	r31, r0

		//0   degrees is at 97
		//90  degrees is at 316
		//135 degrees is at 425
		//180 degrees is at 535
		OCR1A = 97 + potValue;							//0 degrees is at 97
 15c:	0f 2e       	mov	r0, r31
 15e:	f8 e8       	ldi	r31, 0x88	; 136
 160:	ef 2e       	mov	r14, r31
 162:	f1 2c       	mov	r15, r1
 164:	f0 2d       	mov	r31, r0
	adc_init();
	
  
    while (1) 
    {
		ADCSRA |= (1<<ADSC);
 166:	f8 01       	movw	r30, r16
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
		while((ADCSRA & (1<<ADIF)) == 0);
 16e:	f8 01       	movw	r30, r16
 170:	80 81       	ld	r24, Z
 172:	84 ff       	sbrs	r24, 4
 174:	fc cf       	rjmp	.-8      	; 0x16e <main+0x76>
		ADCSRA |= (1<<ADIF);
 176:	80 81       	ld	r24, Z
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	80 83       	st	Z, r24
		
		potValue = ADC;
 17c:	f6 01       	movw	r30, r12
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>

		//0   degrees is at 97
		//90  degrees is at 316
		//135 degrees is at 425
		//180 degrees is at 535
		OCR1A = 97 + potValue;							//0 degrees is at 97
 186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	8f 59       	subi	r24, 0x9F	; 159
 18e:	9f 4f       	sbci	r25, 0xFF	; 255
 190:	f7 01       	movw	r30, r14
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
		itoa(potValue, buffer, 10);
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 19a:	4a e0       	ldi	r20, 0x0A	; 10
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	be 01       	movw	r22, r28
 1a0:	6f 5f       	subi	r22, 0xFF	; 255
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <itoa>
		usart_tx_string(buffer);
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <usart_tx_string>
		usart_tx_string("\n");
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 66 00 	call	0xcc	; 0xcc <usart_tx_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	ff ef       	ldi	r31, 0xFF	; 255
 1bc:	23 ed       	ldi	r18, 0xD3	; 211
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	f1 50       	subi	r31, 0x01	; 1
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0xc8>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0xd2>
 1ca:	00 00       	nop
 1cc:	cc cf       	rjmp	.-104    	; 0x166 <main+0x6e>

000001ce <itoa>:
 1ce:	45 32       	cpi	r20, 0x25	; 37
 1d0:	51 05       	cpc	r21, r1
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <itoa+0xe>
 1d4:	42 30       	cpi	r20, 0x02	; 2
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <itoa+0xe>
 1d8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__itoa_ncheck>
 1dc:	fb 01       	movw	r30, r22
 1de:	10 82       	st	Z, r1
 1e0:	cb 01       	movw	r24, r22
 1e2:	08 95       	ret

000001e4 <__itoa_ncheck>:
 1e4:	bb 27       	eor	r27, r27
 1e6:	4a 30       	cpi	r20, 0x0A	; 10
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <__itoa_ncheck+0x12>
 1ea:	99 23       	and	r25, r25
 1ec:	22 f4       	brpl	.+8      	; 0x1f6 <__itoa_ncheck+0x12>
 1ee:	bd e2       	ldi	r27, 0x2D	; 45
 1f0:	90 95       	com	r25
 1f2:	81 95       	neg	r24
 1f4:	9f 4f       	sbci	r25, 0xFF	; 255
 1f6:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__utoa_common>

000001fa <__utoa_ncheck>:
 1fa:	bb 27       	eor	r27, r27

000001fc <__utoa_common>:
 1fc:	fb 01       	movw	r30, r22
 1fe:	55 27       	eor	r21, r21
 200:	aa 27       	eor	r26, r26
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	aa 1f       	adc	r26, r26
 208:	a4 17       	cp	r26, r20
 20a:	10 f0       	brcs	.+4      	; 0x210 <__utoa_common+0x14>
 20c:	a4 1b       	sub	r26, r20
 20e:	83 95       	inc	r24
 210:	50 51       	subi	r21, 0x10	; 16
 212:	b9 f7       	brne	.-18     	; 0x202 <__utoa_common+0x6>
 214:	a0 5d       	subi	r26, 0xD0	; 208
 216:	aa 33       	cpi	r26, 0x3A	; 58
 218:	08 f0       	brcs	.+2      	; 0x21c <__utoa_common+0x20>
 21a:	a9 5d       	subi	r26, 0xD9	; 217
 21c:	a1 93       	st	Z+, r26
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	79 f7       	brne	.-34     	; 0x200 <__utoa_common+0x4>
 222:	b1 11       	cpse	r27, r1
 224:	b1 93       	st	Z+, r27
 226:	11 92       	st	Z+, r1
 228:	cb 01       	movw	r24, r22
 22a:	0c 94 17 01 	jmp	0x22e	; 0x22e <strrev>

0000022e <strrev>:
 22e:	dc 01       	movw	r26, r24
 230:	fc 01       	movw	r30, r24
 232:	67 2f       	mov	r22, r23
 234:	71 91       	ld	r23, Z+
 236:	77 23       	and	r23, r23
 238:	e1 f7       	brne	.-8      	; 0x232 <strrev+0x4>
 23a:	32 97       	sbiw	r30, 0x02	; 2
 23c:	04 c0       	rjmp	.+8      	; 0x246 <strrev+0x18>
 23e:	7c 91       	ld	r23, X
 240:	6d 93       	st	X+, r22
 242:	70 83       	st	Z, r23
 244:	62 91       	ld	r22, -Z
 246:	ae 17       	cp	r26, r30
 248:	bf 07       	cpc	r27, r31
 24a:	c8 f3       	brcs	.-14     	; 0x23e <strrev+0x10>
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
